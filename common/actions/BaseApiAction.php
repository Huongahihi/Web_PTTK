<?php
/**
 * @link http://www.yiiframework.com/
 * @copyright Copyright (c) 2008 Yii Software LLC
 * @license http://www.yiiframework.com/license/
 */

namespace common\actions;

use backend\modules\app\models\AppUserTokenAPI;
use common\components\FConstant;
use common\components\FError;
use common\components\FHtml;
use common\components\FApi;
use common\components\FSecurity;

/**
 * Action is the base class for action classes that implement RESTful API.
 *
 * @author Qiang Xue <qiang.xue@gmail.com>
 * @since 2.0
 */
class BaseApiAction extends \yii\base\Action
{
    public $checkAccess;
    public $listname;
    public $objectname;
    public $objectid;
    public $fields;
    public $params;
    public $paramsArray;
    public $orderby;
    public $limit;
    public $page;
    public $lang;
    public $application_id;
    public $category_id;
    public $user_id;
    public $token;
    public $keyword;
    public $time;
    public $foot_print;

    public $is_secured = false;

    protected function prepareParams() {

        $this->listname = isset($this->listname) ? $this->listname : FHtml::getRequestParam(['object', 'n', 'name', 'list', 'listname', 'table']);
        $this->objectname = isset($this->objectname) ? $this->objectname : FHtml::getRequestParam(['object', 'n', 'name', 'detail', 'objectname', 'table']);
        $this->objectid = isset($this->objectid) ? $this->objectid : FHtml::getRequestParam(['id', 'objectid']);

        $this->fields = isset($this->fields) ? $this->fields : FHtml::getRequestParam(['fields', 'columns']);
        $this->keyword = isset($this->keyword) ? $this->keyword : FHtml::getRequestParam(['keyword', 'k']);

        $this->params = isset($this->params) ? $this->params : FHtml::getRequestParam(['params', 'search', 'filter', 's']);

        $this->orderby = isset($this->orderby) ? $this->orderby : FHtml::getRequestParam(['sort', 'order', 'sort_by', 'order_by', 'orderby']);
        $this->limit = isset($this->limit) ? $this->limit : FHtml::getRequestParam(['limit', 'page_size', 'pagesize'], -1);
        $this->page = isset($this->page) ? $this->page : FHtml::getRequestParam(['page', 'p', 'page_index'], 1);
        $this->lang = isset($this->lang) ? $this->lang : FHtml::getRequestParam(['lang', 'l']);
        $this->application_id = isset($this->application_id) ? $this->application_id : FHtml::getRequestParam(['application_id', 'client_id']);
        $this->user_id = isset($this->user_id) ? $this->user_id : FHtml::getRequestParam('user_id');
        $this->token = isset($this->token) ? $this->token : FHtml::getRequestParam('token');
        $this->time = FHtml::getRequestParam(['Time', 'time', 'time_stamp']);
        $this->foot_print = FHtml::getRequestParam(['FootPrint', 'footprint', 'foot_print']);

        $this->paramsArray = [];
        //Default Search Params: lang, application_id
        $this->paramsArray = FHtml::mergeRequestParams($this->paramsArray,
            [
                'lang' => $this->lang,
                'application_id' => $this->application_id,
            ]);

        if (!empty($this->params))
            $this->paramsArray = FHtml::mergeRequestParams($this->paramsArray, FHtml::decode($this->params));
    }

    protected function html_decode_x2($xml_string_html)
    {
        if (count($xml_string_html) > 0)
            return strip_tags(html_entity_decode(html_entity_decode(str_replace("&nbsp;", "", $xml_string_html))));
        else return $xml_string_html;
    }

    public function beforeRun()
    {
        $this->prepareParams();


        return parent::beforeRun(); // TODO: Change the autogenerated stub
    }

    public function isAuthorized() {
        //not require secured action
        if(!$this->is_secured){
            return true;
        }

        if (FHtml::settingAPICheckFootPrint()) {

            //Check FootPrint & Time
            if (empty($this->foot_print) || empty($this->time))
                return FApi::getOutputForAPI('', FConstant::ERROR, 'Footprint missing', ['code' => 201]);

            $request_params = FHtml::RequestParams(['FootPrint', 'foot_print', 'footprint']);
            $params = array_values($request_params);

            $check = FHtml::checkFootPrint($this->foot_print, $this->time, $params);

            if (!empty($check))
                return FApi::getOutputForAPI('', FConstant::ERROR, $check, ['code' => 201]);
        }

        if (FHtml::settingAPICheckToken()) {

            //Check Token
            $token = $this->token;

            if (strlen($token) != 0) {
                $login_token = AppUserTokenAPI::find()->where('token = "' . $token . '"')->one();
                if (isset($login_token)) {
                    if (isset ($login_token->user)) {
                        $this->user_id = $login_token->user->id;
                        return true;
                    } else {
                        //$login_token->delete();
                        return FApi::getOutputForAPI('', FConstant::ERROR, FApi::getErrorMsg(221), ['code' => 221]);
                    }
                } else {
                    return FApi::getOutputForAPI('', FConstant::ERROR, FConstant::TOKEN_MISMATCH, ['code' => 205]);
                }
            } else {
                return FApi::getOutputForAPI('', FConstant::ERROR, 'Token missing', ['code' => 204]);
            }
        }

        return true;
    }

    public function checkAccess() {
        return self::isAuthorized();
    }

    public function showJson($models, $type = '', $message = '', $totalPage = 1, $pageSize = 0, $pageIndex = 0, $dataParam = 'data') {
        return FHtml::getOutputForAPI($models, $type, $message, $dataParam, $totalPage, $pageSize, $pageIndex);
    }
}
